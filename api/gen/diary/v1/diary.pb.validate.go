// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: diary/v1/diary.proto

package diary

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEntryRequestMultiError, or nil if none found.
func (m *CreateEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	if len(errors) > 0 {
		return CreateEntryRequestMultiError(errors)
	}

	return nil
}

// CreateEntryRequestMultiError is an error wrapping multiple validation errors
// returned by CreateEntryRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEntryRequestMultiError) AllErrors() []error { return m }

// CreateEntryRequestValidationError is the validation error returned by
// CreateEntryRequest.Validate if the designated constraints aren't met.
type CreateEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntryRequestValidationError) ErrorName() string {
	return "CreateEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntryRequestValidationError{}

// Validate checks the field values on CreateEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEntryResponseMultiError, or nil if none found.
func (m *CreateEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateEntryResponseMultiError(errors)
	}

	return nil
}

// CreateEntryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEntryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEntryResponseMultiError) AllErrors() []error { return m }

// CreateEntryResponseValidationError is the validation error returned by
// CreateEntryResponse.Validate if the designated constraints aren't met.
type CreateEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntryResponseValidationError) ErrorName() string {
	return "CreateEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntryResponseValidationError{}

// Validate checks the field values on ListEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntriesRequestMultiError, or nil if none found.
func (m *ListEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListEntriesRequestMultiError(errors)
	}

	return nil
}

// ListEntriesRequestMultiError is an error wrapping multiple validation errors
// returned by ListEntriesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntriesRequestMultiError) AllErrors() []error { return m }

// ListEntriesRequestValidationError is the validation error returned by
// ListEntriesRequest.Validate if the designated constraints aren't met.
type ListEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntriesRequestValidationError) ErrorName() string {
	return "ListEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntriesRequestValidationError{}

// Validate checks the field values on ListEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntriesResponseMultiError, or nil if none found.
func (m *ListEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEntriesResponseMultiError(errors)
	}

	return nil
}

// ListEntriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListEntriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntriesResponseMultiError) AllErrors() []error { return m }

// ListEntriesResponseValidationError is the validation error returned by
// ListEntriesResponse.Validate if the designated constraints aren't met.
type ListEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntriesResponseValidationError) ErrorName() string {
	return "ListEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntriesResponseValidationError{}

// Validate checks the field values on Entry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Entry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Entry with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EntryMultiError, or nil if none found.
func (m *Entry) ValidateAll() error {
	return m.validate(true)
}

func (m *Entry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Text

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EntryMultiError(errors)
	}

	return nil
}

// EntryMultiError is an error wrapping multiple validation errors returned by
// Entry.ValidateAll() if the designated constraints aren't met.
type EntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntryMultiError) AllErrors() []error { return m }

// EntryValidationError is the validation error returned by Entry.Validate if
// the designated constraints aren't met.
type EntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntryValidationError) ErrorName() string { return "EntryValidationError" }

// Error satisfies the builtin error interface
func (e EntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntryValidationError{}
